"------------------------------------------------------------
" Influences color theme.
" bg = background
set bg=light
"------------------------------------------------------------
" Make vsplit put the new buffer on the right side
set splitright
"------------------------------------------------------------
" Formatting options
"------------------------------------------------------------
" Settings to wrap text automatically
" textwidth is used as the max line length when wrapping
set textwidth=79
"   t automatic line wrapping in text
"   c automatic line wrapping in comments
"   r insert comment leader when hitting <ENTER> in insert mode
set formatoptions+=tcr
"   o insert comment leader when hitting 'o' or 'O' in normal mode
set formatoptions-=o 

"------------------------------------------------------------
" Highlighting
"------------------------------------------------------------
" Highlights trailing whitespace
match Todo /\s\+$/
"------------------------------------------------------------
" Plug-In configurations
"------------------------------------------------------------

"------------------------------------------------------------
" YouCompleteMe configuration
let g:ycm_complete_in_comments = 1

"------------------------------------------------------------
" RepeatableMotions configuration
map <Up> <Plug>RepeatMotionUp
map <Down> <Plug>RepeatMotionDown
map <Right> <Plug>RepeatMotionRight
map <Left> <Plug>RepeatMotionLeft

"------------------------------------------------------------
" Tags configuration
nmap <F8> :TagbarToggle<CR>

"------------------------------------------------------------
" Functions
function GrepTagFileAndSearch(name)
    execute "! grep " . a:name . " tags"
    let @/ = '\<' . a:name . '\>'
    normal! n
endfunction
command! -nargs=1 GrepTagFileAndSearch :call GrepTagFileAndSearch(<q-args>)

function Gfixup(hash)
    execute ":Gcommit"
    startinsert
    call feedkeys("fixup! " . a:hash)
endfunction
command! -nargs=1 GrepTagFileAndSearch :call GrepTagFileAndSearch(<q-args>)

"------------------------------------------------------------
" Leader maps
"------------------------------------------------------------
" Comment/uncomment a line
noremap <leader>c gcc
" Search backwards for a line without indentation
" Can be used for GAP code to jump to definition of the outermost function.
noremap <leader>d <ESC>?^\S<CR>:nohl<CR>
inoremap <S-space> <ESC>
noremap <leader><space> 10j
" Delete EOL and following whitespace, if we were in insert mode
" we go back to insert mode afterwards.
inoremap <S-del> <ESC>$a  <del><ESC>dwi
noremap <S-del> $a  <del><ESC>dw
" substitute
noremap <leader>s :<C-f>i:%s//gc<ESC>2hi

" Remap Y to be similar to C and D
noremap Y y$

"------------------------------------------------------------
" Fugitive maps
noremap <leader><S-G> :Git 
noremap <leader><S-S> :Git switch 
noremap <leader>gi :Git 
noremap <C-F> :Git<CR><C-W>H/^M\>\\|^U\><CR>
noremap <C-G> :Git<CR>H/^M\>\\|^U\><CR>
noremap <leader>gfe :Gfetch<CR>
noremap <leader>grr :Grebase<CR>
noremap <leader>gri :Grebase --interactive HEAD~
noremap <leader>gre :Git restructure 
noremap <leader>gree :Git restructure<CR>
noremap <leader>gb :Gblame<CR>
noremap <leader>gsh :0Git show<CR>
noremap <leader>gss :Git stash<CR>
noremap <leader>gsp :Git stash pop<CR>
noremap <leader>gll :0Git log<CR>
noremap <leader>gln :Git log --decorate --oneline<CR>
noremap <leader>0gln :0Git log --decorate --oneline<CR>
noremap <leader>guu :Git update<CR>
noremap <leader>gd :Git diff<CR>
noremap <leader>gpp :Gpush<CR>
noremap <leader>gpff :Gpush -f<CR>
noremap <leader>gtpp :Gpush --tags<CR>
noremap <leader>gtpff :Gpush -f --tags<CR>
" Somewhat hacky map to change from diff view to normal view
" of the current buffer
noremap <leader>gD :diffoff \| windo if &diff \| hide \| endif<CR>:Gedit<CR>


"------------------------------------------------------------
" Set location of swap files for use on elwin
if hostname() == "elwin"
  set directory=/mnt/localdata/sergio/nvimswap/
endif

"------------------------------------------------------------
" Moving through splits
noremap <S-tab> <C-W><C-W>
tnoremap <S-tab> <C-\><C-N><C-W><C-W>
" These only work when I source the vimrc again, why?
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

noremap <S-Up> <C-W>k
noremap <S-Down> <C-W>j
noremap <S-Right> <C-W>l
noremap <S-Left> <C-W>h

"------------------------------------------------------------
" Moving through tabs
noremap <leader>tj :tabnext<CR>
noremap <leader>tk :tabprevious<CR>
noremap <leader>tmj :tabmove +1<CR>
noremap <leader>tmk :tabmove -1<CR>
" You can move through tabs with Ctrl + PageUp / PageDown
" Make this also work in terminal mode
:tnoremap <C-PageUp> <C-\><C-N><C-PageUp>
:tnoremap <C-PageDown> <C-\><C-N><C-PageDown>

"------------------------------------------------------------
" Opening and closing tabs
noremap <leader>tt :tabedit %<CR>:b 
noremap <leader>ter :tabedit %<CR>:term<CR>i
" Tab Edit This
noremap <leader>tet :tabedit %<CR>
noremap <leader>tee :tabedit 
noremap <leader>tc :tabclose<CR>
noremap <leader>tq :tabclose<CR>
noremap <leader>tre :TabooRename 

"------------------------------------------------------------
" Maps for terminal mode
" Open terminal in split if does not exist, otherwise change
" to terminal buffer.
" Probably need a function here?
noremap <leader>tv :vs<CR>:term<CR>
" Make <C-W> exit terminal mode
:tnoremap <C-W> <C-\><C-N><C-W>

" Save
noremap  <C-s> :w<CR>
inoremap <C-s> <ESC>:w<CR>
" Save and quit
noremap   <C-x> :x<CR>
inoremap  <C-x> <ESC>:x<CR>
" Quit
" Unfortunately <C-w> is already used for working with splits
noremap   <C-q> :q<CR>
inoremap  <C-q> <ESC>:q<CR>

" vim: set ft=vim
