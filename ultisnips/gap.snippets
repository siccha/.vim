extends gapdoc

global !p
def extractParams(t):
  if t:
    t = t.split(', ')
  return t
endglobal

global !p
def paramsToComs(t):
  if t:
    t = extractParams(t)
    # prepend '##' and append newline
    t = [ ("##  " + m + "\n") for m in t ]
    t = "".join(t)
    # remove last newline
    t = t[:len(t)-2]
  return t
endglobal

snippet FUNCT "function declaration" A
function($0)
end;
endsnippet

snippet IF "if" bA
if ${0:condition} then
fi;
endsnippet

snippet FOR "for" bA
for ${1:i} in ${2:[1 .. ${3:n}]} do
    ${0:${VISUAL}}
od;
endsnippet

snippet break "Break Point" b
Error( "Break Point - $0" );
endsnippet

snippet ato "atomic" b
atomic ${1:readonly $2} do
    ${0:${VISUAL}}
od;
endsnippet

snippet LIST "List" A
List(${0:${VISUAL}}, $1);
endsnippet

snippet funcblock "Insert gap function block" b
##################################################
# function $1
# Input:
`!p snip.rv = paramsToComs(t[2])`
#
# Output:
#   $3
##################################################
${1:${VISUAL:NAME}} := function( ${2:PARAM} )
    $4
    return ${3:RETURN VALUE};
end;
endsnippet

snippet InstallMethod "InstallMethod with GAPDoc" b
##  <#GAPDoc Label="$1">
##  <ManSection>
##  <${5:TYPE} Name="$1" Arg='$4'/>
##
##  <Description>
`!p snip.rv = paramsToComs(t[4])`
##  </Description>
##  </ManSection>

InstallMethod(${1:${VISUAL:NAME}},
${3:DESCRIPTION},
[${2:FILTERS}],
function(${4:ARGUMENTS})$6
end);
endsnippet

snippet header "Insert GAP file header" b
#############################################################################
##
##                             $1 package
##  ${2:FILENAME}
##                                                          Sergio Siccha
##
##  Copyright...
##
##  ${3:DESCRIPTION}
##
#############################################################################
$0
endsnippet
